#file: noinspection SpellCheckingInspection
services:
  nginx:
    image: nginx:latest
    volumes:
      - ./symfony1:/app/symfony1
      - ./symfony2:/app/symfony2
      - ./laravel:/app/laravel
      - ./nginx/demo:/etc/nginx/conf.d/demo.conf
      - ./nginx/symfony1:/etc/nginx/conf.d/default.conf
      - ./nginx/symfony2:/etc/nginx/conf.d/symfony2.conf
      - ./nginx/laravel:/etc/nginx/conf.d/laravel.conf
      - ./:/demo
    networks:
      - app-network
    ports:
      - '9999:80'
      - '9991:81'
      - '9992:82'
      - '9993:83'
    depends_on:
      - symfony1
      - symfony2
      - laravel

  symfony1:
    build:
      context:
        symfony1
    container_name: symfony1
    working_dir: /app/symfony1
    volumes:
      - ./symfony1:/app/symfony1
      - ./fpm/pool.conf:/etc/php/8.3/fpm/pool.d/www.conf
      - ./fpm/xdebug.ini:/etc/php/8.3/fpm/conf.d/99-xdebug-extras.ini
      - .:/demo
    networks:
      app-network:
        aliases:
          - symfony1

    environment:
      # Make PHP-FPM listen on all interfaces
      PHP_FPM_LISTEN: 0.0.0.0:9000
      XDEBUG_MODE: "debug,develop"
      XDEBUG_CLIENT_HOST: "host.docker.internal"
      XDEBUG_CLIENT_PORT: 9003
      XDEBUG_START_WITH_REQUEST: "no"
      XDEBUG_DISCOVER_CLIENT_HOST: "no"
      XDEBUG_CONFIG: "idekey=gdrozd"
    extra_hosts:
      - "host.docker.internal:host-gateway"

  symfony2:
    build:
      context:
        symfony2
    container_name: symfony2
    working_dir: /app/symfony2
    volumes:
      - ./symfony2:/app/symfony2
      - ./fpm/pool.conf:/etc/php/8.3/fpm/pool.d/www.conf
      - ./fpm/xdebug.ini:/etc/php/8.3/fpm/conf.d/99-xdebug-extras.ini
      - .:/demo
    networks:
      app-network:
        aliases:
          - symfony2

    environment:
      # Make PHP-FPM listen on all interfaces
      PHP_FPM_LISTEN: 0.0.0.0:9000
      XDEBUG_MODE: "debug,develop"
      XDEBUG_CLIENT_HOST: "host.docker.internal"
      XDEBUG_CLIENT_PORT: 9003
      XDEBUG_START_WITH_REQUEST: "no"
      XDEBUG_DISCOVER_CLIENT_HOST: "no"
      XDEBUG_CONFIG: "idekey=gdrozd"
    extra_hosts:
      - "host.docker.internal:host-gateway"

  laravel:
    build:
      context:
        laravel
    container_name: laravel
    working_dir: /app/laravel
    volumes:
      - ./laravel:/app/laravel
      - ./fpm/pool.conf:/etc/php/8.3/fpm/pool.d/www.conf
      - .:/demo
    networks:
      - app-network
    environment:
      # Make PHP-FPM listen on all interfaces
      PHP_FPM_LISTEN: 0.0.0.0:9000

  otel-collector:
    depends_on:
      uptrace:
        condition: service_healthy
    image: otel/opentelemetry-collector-contrib
    networks:
      - app-network
    volumes:
      - ./otel-collector/config.yaml:/etc/otelcol-contrib/config.yaml
    ports:
      - '1888:1888' # pprof extension
      - '8888:8888' # Prometheus metrics exposed by the Collector
      - '8889:8889' # Prometheus exporter metrics
      - '13133:13133' # health_check extension
      - '4317:4317' # OTLP gRPC receiver
      - '4318:4318' # OTLP http receiver
      - '55679:55679' # zpages extension

  otel-jaeger:
    image: jaegertracing/jaeger:2.5.0
    restart: always
    networks:
      - app-network
    environment:
      COLLECTOR_ZIPKIN_HOST_PORT: 9412
    ports:
      - "9412:9412"
      - "5778:5778"
      - "14317:4317"
      - "14318:4318"
      - "14268:14268"
      - "14269:14269"
      - "14250:14250"
      - "16686:16686"
    expose:
      - '8888'

  otel-zipkin:
    image: openzipkin/zipkin-slim
    restart: always
    networks:
      - app-network
    ports:
      - "9411:9411"


  opensearch-node1:
    image: opensearchproject/opensearch:latest
    container_name: opensearch-node1
    networks:
      - app-network
    environment:
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m"
      - OPENSEARCH_INITIAL_ADMIN_PASSWORD=fOObar12312312!!3
      - OPENSEARCH_PLUGINS=observability
      - plugins.security.disabled=true    # Add this line
      - plugins.security.ssl.http.enabled=false
      - plugins.security.allow_unsafe_democertificates=true
      - plugins.security.allow_default_init_securityindex=true
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - opensearch-data1:/usr/share/opensearch/data
    ports:
      - '9200:9200'
      - '9600:9600'

  opensearch-dashboards:
    image: opensearchproject/opensearch-dashboards:latest
    container_name: opensearch-dashboards
    networks:
      - app-network
    ports:
      - '5601:5601'
    environment:
      - OPENSEARCH_HOSTS=http://opensearch-node1:9200
      - OPENSEARCH_SSL_VERIFICATIONMODE=none
      - DISABLE_SECURITY_DASHBOARDS_PLUGIN=true

  prometheus:
    image: prom/prometheus:latest
    networks:
      - app-network
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/config.yml:/etc/prometheus/prometheus.yml

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    networks:
      - app-network
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana

  data-prepper:
    platform: linux/amd64
    image: opensearchproject/data-prepper:latest
    container_name: dataprepper
    networks:
      - app-network
    volumes:
      - /data/service-map/
      - ./dataprepper/templates/ss4o_metrics.json:/usr/share/data-prepper/templates/ss4o_metrics.json
      - ./dataprepper/templates/ss4o_logs.json:/usr/share/data-prepper/templates/ss4o_logs.json
      - ./dataprepper/templates/ss4o_traces.json:/usr/share/data-prepper/templates/ss4o_traces.json
      - ./dataprepper/pipelines.yaml:/usr/share/data-prepper/pipelines/pipelines.yaml
      - ./dataprepper/data-prepper-config.yaml:/usr/share/data-prepper/config/data-prepper-config.yaml
    ports:
      - "21890:21890" # entry pipeline
      - "21891:21891" # metrics
      - "21892:21892" # logs
      - "21893:21893" # otel metrics
    expose:
      - "21890"
      - "21891"
      - "21892"
      - "21893"

  clickhouse:
    image: clickhouse/clickhouse-server:24.11
    restart: on-failure
    hostname: clickhouse
    networks:
      - app-network
    environment:
      CLICKHOUSE_DB: uptrace
      SHARD: shard1
      REPLICA: replica1
      KEEPER_ID: 1
      CLICKHOUSE_USER: default
      CLICKHOUSE_PASSWORD: 123
    healthcheck:
      test: ['CMD', 'wget', '--spider', '-q', 'localhost:8123/ping']
      interval: 30s
      timeout: 2s
      retries: 30
      start_period: 60s
    user: clickhouse
    volumes:
      - ch_data:/var/lib/clickhouse
      - ./uptrace/clickhouse/config.xml:/etc/clickhouse-server/config.d/config.xml
      - ./uptrace/clickhouse/cluster.xml:/etc/clickhouse-server/config.d/cluster.xml
      - ./uptrace/clickhouse/keeper.xml:/etc/clickhouse-server/config.d/keeper.xml
      - ./uptrace/clickhouse/users.xml:/etc/clickhouse-server/users.d/users.xml
    ports:
      - '8123:8123'
      - '9000:9000'
      - '9440:9440'
    extra_hosts:
      - 'host.docker.internal:host-gateway'

  postgres:
    image: postgres:15-alpine
    restart: on-failure
    networks:
      - app-network
    environment:
      PGDATA: /var/lib/postgresql/data/pgdata
      POSTGRES_USER: uptrace
      POSTGRES_PASSWORD: uptrace
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U uptrace" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    volumes:
      - 'pg_data:/var/lib/postgresql/data/pgdata'
    ports:
      - '5432:5432'

  uptrace:
    image: 'uptrace/uptrace:1.7.7'
    #image: 'uptrace/uptrace-dev:latest'
    restart: on-failure
    networks:
      - app-network
    volumes:
      - ./uptrace/uptrace.yml:/etc/uptrace/uptrace.yml
    #environment:
    #  - DEBUG=2
    ports:
      - '24317:14317'
      - '24318:14318'
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "http://localhost:14318/health" ]
      interval: 20s
      timeout: 10s
      retries: 3
      start_period: 90s
    depends_on:
      clickhouse:
        condition: service_healthy
      postgres:
        condition: service_healthy

volumes:
  symfony1:

  symfony2:

  laravel:

  opensearch-data1:

  grafana-data:

  pg_data:

  ch_data:

networks:
  app-network:
    driver: bridge
    # Add these settings to allow container to host communication
    driver_opts:
      com.docker.network.bridge.host_binding_ipv4: "0.0.0.0"
    # Add extra_hosts at the network level if needed
    name: app-network
